diff --git a/libavcodec/bytestream.h b/libavcodec/bytestream.h
index d0033f14f3..0516a6e3dc 100644
--- a/libavcodec/bytestream.h
+++ b/libavcodec/bytestream.h
@@ -77,15 +77,11 @@ static av_always_inline type bytestream2_get_ ## name(GetByteContext *g)       \
     }                                                                          \
     return bytestream2_get_ ## name ## u(g);                                   \
 }                                                                              \
-static av_always_inline type bytestream2_peek_ ## name ## u(GetByteContext *g) \
-{                                                                              \
-    return read(g->buffer);                                                    \
-}                                                                              \
 static av_always_inline type bytestream2_peek_ ## name(GetByteContext *g)      \
 {                                                                              \
     if (g->buffer_end - g->buffer < bytes)                                     \
         return 0;                                                              \
-    return bytestream2_peek_ ## name ## u(g);                                  \
+    return read(g->buffer);                                                    \
 }
 
 DEF(uint64_t,     le64, 8, AV_RL64, AV_WL64)
diff --git a/libavcodec/get_bits.h b/libavcodec/get_bits.h
index 66fb877599..e7b3caa2e0 100644
--- a/libavcodec/get_bits.h
+++ b/libavcodec/get_bits.h
@@ -29,13 +29,9 @@
 
 #include <stdint.h>
 
-#include "libavutil/common.h"
-#include "libavutil/intreadwrite.h"
-#include "libavutil/log.h"
-#include "libavutil/avassert.h"
-#include "avcodec.h"
-#include "mathops.h"
-#include "vlc.h"
+#ifndef NEG_USR32
+#   define NEG_USR32(a,s) (((uint32_t)(a))>>(32-(s)))
+#endif
 
 /*
  * Safe bitstream reading:
@@ -313,72 +309,12 @@ static inline void skip_remaining(GetBitContext *s, unsigned n)
 }
 #endif
 
-/**
- * Read MPEG-1 dc-style VLC (sign bit + mantissa with no MSB).
- * if MSB not set it is negative
- * @param n length in bits
- */
-static inline int get_xbits(GetBitContext *s, int n)
-{
-#if CACHED_BITSTREAM_READER
-    int32_t cache = show_bits(s, 32);
-    int sign = ~cache >> 31;
-    skip_remaining(s, n);
-
-    return ((((uint32_t)(sign ^ cache)) >> (32 - n)) ^ sign) - sign;
-#else
-    register int sign;
-    register int32_t cache;
-    OPEN_READER(re, s);
-    av_assert2(n>0 && n<=25);
-    UPDATE_CACHE(re, s);
-    cache = GET_CACHE(re, s);
-    sign  = ~cache >> 31;
-    LAST_SKIP_BITS(re, s, n);
-    CLOSE_READER(re, s);
-    return (NEG_USR32(sign ^ cache, n) ^ sign) - sign;
-#endif
-}
-
-#if !CACHED_BITSTREAM_READER
-static inline int get_xbits_le(GetBitContext *s, int n)
-{
-    register int sign;
-    register int32_t cache;
-    OPEN_READER(re, s);
-    av_assert2(n>0 && n<=25);
-    UPDATE_CACHE_LE(re, s);
-    cache = GET_CACHE(re, s);
-    sign  = sign_extend(~cache, n) >> 31;
-    LAST_SKIP_BITS(re, s, n);
-    CLOSE_READER(re, s);
-    return (zero_extend(sign ^ cache, n) ^ sign) - sign;
-}
-#endif
-
-static inline int get_sbits(GetBitContext *s, int n)
-{
-    register int tmp;
-#if CACHED_BITSTREAM_READER
-    av_assert2(n>0 && n<=25);
-    tmp = sign_extend(get_bits(s, n), n);
-#else
-    OPEN_READER(re, s);
-    av_assert2(n>0 && n<=25);
-    UPDATE_CACHE(re, s);
-    tmp = SHOW_SBITS(re, s, n);
-    LAST_SKIP_BITS(re, s, n);
-    CLOSE_READER(re, s);
-#endif
-    return tmp;
-}
-
 /**
  * Read 1-25 bits.
  */
 static inline unsigned int get_bits(GetBitContext *s, int n)
 {
-    register unsigned int tmp;
+    unsigned int tmp;
 #if CACHED_BITSTREAM_READER
 
     av_assert2(n>0 && n<=32);
@@ -409,61 +345,6 @@ static inline unsigned int get_bits(GetBitContext *s, int n)
     return tmp;
 }
 
-/**
- * Read 0-25 bits.
- */
-static av_always_inline int get_bitsz(GetBitContext *s, int n)
-{
-    return n ? get_bits(s, n) : 0;
-}
-
-static inline unsigned int get_bits_le(GetBitContext *s, int n)
-{
-#if CACHED_BITSTREAM_READER
-    av_assert2(n>0 && n<=32);
-    if (n > s->bits_left) {
-        refill_32(s, 1);
-        if (s->bits_left < 32)
-            s->bits_left = n;
-    }
-
-    return get_val(s, n, 1);
-#else
-    register int tmp;
-    OPEN_READER(re, s);
-    av_assert2(n>0 && n<=25);
-    UPDATE_CACHE_LE(re, s);
-    tmp = SHOW_UBITS_LE(re, s, n);
-    LAST_SKIP_BITS(re, s, n);
-    CLOSE_READER(re, s);
-    return tmp;
-#endif
-}
-
-/**
- * Show 1-25 bits.
- */
-static inline unsigned int show_bits(GetBitContext *s, int n)
-{
-    register unsigned int tmp;
-#if CACHED_BITSTREAM_READER
-    if (n > s->bits_left)
-#ifdef BITSTREAM_READER_LE
-        refill_32(s, 1);
-#else
-        refill_32(s, 0);
-#endif
-
-    tmp = show_val(s, n);
-#else
-    OPEN_READER_NOSIZE(re, s);
-    av_assert2(n>0 && n<=25);
-    UPDATE_CACHE(re, s);
-    tmp = SHOW_UBITS(re, s, n);
-#endif
-    return tmp;
-}
-
 static inline void skip_bits(GetBitContext *s, int n)
 {
 #if CACHED_BITSTREAM_READER
@@ -530,11 +411,6 @@ static inline unsigned int get_bits1(GetBitContext *s)
 #endif
 }
 
-static inline unsigned int show_bits1(GetBitContext *s)
-{
-    return show_bits(s, 1);
-}
-
 static inline void skip_bits1(GetBitContext *s)
 {
     skip_bits(s, 1);
@@ -584,31 +460,6 @@ static inline uint64_t get_bits64(GetBitContext *s, int n)
     }
 }
 
-/**
- * Read 0-32 bits as a signed integer.
- */
-static inline int get_sbits_long(GetBitContext *s, int n)
-{
-    // sign_extend(x, 0) is undefined
-    if (!n)
-        return 0;
-
-    return sign_extend(get_bits_long(s, n), n);
-}
-
-/**
- * Show 0-32 bits.
- */
-static inline unsigned int show_bits_long(GetBitContext *s, int n)
-{
-    if (n <= MIN_CACHE_BITS) {
-        return show_bits(s, n);
-    } else {
-        GetBitContext gb = *s;
-        return get_bits_long(&gb, n);
-    }
-}
-
 static inline int check_marker(void *logctx, GetBitContext *s, const char *msg)
 {
     int bit = get_bits1(s);
@@ -772,62 +623,6 @@ static inline const uint8_t *align_get_bits(GetBitContext *s)
         SKIP_BITS(name, gb, n);                                 \
     } while (0)
 
-/* Return the LUT element for the given bitstream configuration. */
-static inline int set_idx(GetBitContext *s, int code, int *n, int *nb_bits,
-                          VLC_TYPE (*table)[2])
-{
-    unsigned idx;
-
-    *nb_bits = -*n;
-    idx = show_bits(s, *nb_bits) + code;
-    *n = table[idx][1];
-
-    return table[idx][0];
-}
-
-/**
- * Parse a vlc code.
- * @param bits is the number of bits which will be read at once, must be
- *             identical to nb_bits in init_vlc()
- * @param max_depth is the number of times bits bits must be read to completely
- *                  read the longest vlc code
- *                  = (max_vlc_length + bits - 1) / bits
- * @returns the code parsed or -1 if no vlc matches
- */
-static av_always_inline int get_vlc2(GetBitContext *s, VLC_TYPE (*table)[2],
-                                     int bits, int max_depth)
-{
-#if CACHED_BITSTREAM_READER
-    int nb_bits;
-    unsigned idx = show_bits(s, bits);
-    int code = table[idx][0];
-    int n    = table[idx][1];
-
-    if (max_depth > 1 && n < 0) {
-        skip_remaining(s, bits);
-        code = set_idx(s, code, &n, &nb_bits, table);
-        if (max_depth > 2 && n < 0) {
-            skip_remaining(s, nb_bits);
-            code = set_idx(s, code, &n, &nb_bits, table);
-        }
-    }
-    skip_remaining(s, n);
-
-    return code;
-#else
-    int code;
-
-    OPEN_READER(re, s);
-    UPDATE_CACHE(re, s);
-
-    GET_VLC(code, re, s, table, bits, max_depth);
-
-    CLOSE_READER(re, s);
-
-    return code;
-#endif
-}
-
 static inline int decode012(GetBitContext *gb)
 {
     int n;
@@ -865,4 +660,14 @@ static inline int skip_1stop_8data_bits(GetBitContext *gb)
     return 0;
 }
 
+static inline unsigned int show_bits_long(GetBitContext *s, int n)
+{
+    if (n <= MIN_CACHE_BITS) {
+        return show_bits(s, n);
+    } else {
+        GetBitContext gb = *s;
+        return get_bits_long(&gb, n);
+    }
+}
+
 #endif /* AVCODEC_GET_BITS_H */
diff --git a/libavcodec/golomb.h b/libavcodec/golomb.h
index defee7139b..637111af59 100644
--- a/libavcodec/golomb.h
+++ b/libavcodec/golomb.h
@@ -33,7 +33,6 @@
 #include <stdint.h>
 
 #include "get_bits.h"
-#include "put_bits.h"
 
 #define INVALID_VLC           0x80000000
 
@@ -66,12 +65,9 @@ static inline int get_ue_golomb(GetBitContext *gb)
         return ff_ue_golomb_vlc_code[buf];
     } else {
         int log = 2 * av_log2(buf) - 31;
-
-        skip_bits_long(gb, 32 - log);
-        if (log < 7)
-            return AVERROR_INVALIDDATA;
         buf >>= log;
         buf--;
+        skip_bits_long(gb, 32 - log);
 
         return buf;
     }
@@ -90,8 +86,10 @@ static inline int get_ue_golomb(GetBitContext *gb)
         int log = 2 * av_log2(buf) - 31;
         LAST_SKIP_BITS(re, gb, 32 - log);
         CLOSE_READER(re, gb);
-        if (log < 7)
+        if (log < 7) {
+            av_log(NULL, AV_LOG_ERROR, "Invalid UE golomb code\n");
             return AVERROR_INVALIDDATA;
+        }
         buf >>= log;
         buf--;
 
@@ -116,8 +114,7 @@ static inline unsigned get_ue_golomb_long(GetBitContext *gb)
 
 /**
  * read unsigned exp golomb code, constraint to a max of 31.
- * If the value encountered is not in 0..31, the return value
- * is outside the range 0..30.
+ * the return value is undefined if the stored value exceeds 31.
  */
 static inline int get_ue_golomb_31(GetBitContext *gb)
 {
@@ -404,7 +401,6 @@ static inline int get_ur_golomb(GetBitContext *gb, int k, int limit,
     log = av_log2(buf);
 
     if (log > 31 - limit) {
-        av_assert2(log >= k);
         buf >>= log - k;
         buf  += (30U - log) << k;
         LAST_SKIP_BITS(re, gb, 32 + k - log);
@@ -425,148 +421,6 @@ static inline int get_ur_golomb(GetBitContext *gb, int k, int limit,
 #endif
 }
 
-/**
- * read unsigned golomb rice code (jpegls).
- *
- * @returns -1 on error
- */
-static inline int get_ur_golomb_jpegls(GetBitContext *gb, int k, int limit,
-                                       int esc_len)
-{
-    unsigned int buf;
-    int log;
-
-#if CACHED_BITSTREAM_READER
-    buf = show_bits_long(gb, 32);
-
-    log = av_log2(buf);
-
-    if (log - k >= 1 && 32 - log < limit) {
-        buf >>= log - k;
-        buf  += (30 - log) << k;
-        skip_bits_long(gb, 32 + k - log);
-
-        return buf;
-    } else {
-        int i;
-        for (i = 0;
-             i < limit && get_bits1(gb) == 0 && get_bits_left(gb) > 0;
-             i++);
-
-        if (i < limit - 1) {
-            buf = get_bits_long(gb, k);
-
-            return buf + (i << k);
-        } else if (i == limit - 1) {
-            buf = get_bits_long(gb, esc_len);
-
-            return buf + 1;
-        } else
-            return -1;
-    }
-#else
-    OPEN_READER(re, gb);
-    UPDATE_CACHE(re, gb);
-    buf = GET_CACHE(re, gb);
-
-    log = av_log2(buf);
-
-    av_assert2(k <= 31);
-
-    if (log - k >= 32 - MIN_CACHE_BITS + (MIN_CACHE_BITS == 32) &&
-        32 - log < limit) {
-        buf >>= log - k;
-        buf  += (30U - log) << k;
-        LAST_SKIP_BITS(re, gb, 32 + k - log);
-        CLOSE_READER(re, gb);
-
-        return buf;
-    } else {
-        int i;
-        for (i = 0; i + MIN_CACHE_BITS <= limit && SHOW_UBITS(re, gb, MIN_CACHE_BITS) == 0; i += MIN_CACHE_BITS) {
-            if (gb->size_in_bits <= re_index) {
-                CLOSE_READER(re, gb);
-                return -1;
-            }
-            LAST_SKIP_BITS(re, gb, MIN_CACHE_BITS);
-            UPDATE_CACHE(re, gb);
-        }
-        for (; i < limit && SHOW_UBITS(re, gb, 1) == 0; i++) {
-            SKIP_BITS(re, gb, 1);
-        }
-        LAST_SKIP_BITS(re, gb, 1);
-        UPDATE_CACHE(re, gb);
-
-        if (i < limit - 1) {
-            if (k) {
-                if (k > MIN_CACHE_BITS - 1) {
-                    buf = SHOW_UBITS(re, gb, 16) << (k-16);
-                    LAST_SKIP_BITS(re, gb, 16);
-                    UPDATE_CACHE(re, gb);
-                    buf |= SHOW_UBITS(re, gb, k-16);
-                    LAST_SKIP_BITS(re, gb, k-16);
-                } else {
-                    buf = SHOW_UBITS(re, gb, k);
-                    LAST_SKIP_BITS(re, gb, k);
-                }
-            } else {
-                buf = 0;
-            }
-
-            buf += ((SUINT)i << k);
-        } else if (i == limit - 1) {
-            buf = SHOW_UBITS(re, gb, esc_len);
-            LAST_SKIP_BITS(re, gb, esc_len);
-
-            buf ++;
-        } else {
-            buf = -1;
-        }
-        CLOSE_READER(re, gb);
-        return buf;
-    }
-#endif
-}
-
-/**
- * read signed golomb rice code (ffv1).
- */
-static inline int get_sr_golomb(GetBitContext *gb, int k, int limit,
-                                int esc_len)
-{
-    unsigned v = get_ur_golomb(gb, k, limit, esc_len);
-    return (v >> 1) ^ -(v & 1);
-}
-
-/**
- * read signed golomb rice code (flac).
- *
- * @returns INT_MIN on error
- */
-static inline int get_sr_golomb_flac(GetBitContext *gb, int k, int limit,
-                                     int esc_len)
-{
-    unsigned v = get_ur_golomb_jpegls(gb, k, limit, esc_len);
-    return (v >> 1) ^ -(v & 1);
-}
-
-/**
- * read unsigned golomb rice code (shorten).
- */
-static inline unsigned int get_ur_golomb_shorten(GetBitContext *gb, int k)
-{
-    return get_ur_golomb_jpegls(gb, k, INT_MAX, 0);
-}
-
-/**
- * read signed golomb rice code (shorten).
- */
-static inline int get_sr_golomb_shorten(GetBitContext *gb, int k)
-{
-    int uvar = get_ur_golomb_jpegls(gb, k + 1, INT_MAX, 0);
-    return (uvar >> 1) ^ -(uvar & 1);
-}
-
 #ifdef TRACE
 
 static inline int get_ue(GetBitContext *s, const char *file, const char *func,
@@ -621,134 +475,4 @@ static inline int get_te(GetBitContext *s, int r, char *file, const char *func,
 
 #endif /* TRACE */
 
-/**
- * write unsigned exp golomb code. 2^16 - 2 at most
- */
-static inline void set_ue_golomb(PutBitContext *pb, int i)
-{
-    av_assert2(i >= 0);
-    av_assert2(i <= 0xFFFE);
-
-    if (i < 256)
-        put_bits(pb, ff_ue_golomb_len[i], i + 1);
-    else {
-        int e = av_log2(i + 1);
-        put_bits(pb, 2 * e + 1, i + 1);
-    }
-}
-
-/**
- * write unsigned exp golomb code. 2^32-2 at most.
- */
-static inline void set_ue_golomb_long(PutBitContext *pb, uint32_t i)
-{
-    av_assert2(i <= (UINT32_MAX - 1));
-
-    if (i < 256)
-        put_bits(pb, ff_ue_golomb_len[i], i + 1);
-    else {
-        int e = av_log2(i + 1);
-        put_bits64(pb, 2 * e + 1, i + 1);
-    }
-}
-
-/**
- * write truncated unsigned exp golomb code.
- */
-static inline void set_te_golomb(PutBitContext *pb, int i, int range)
-{
-    av_assert2(range >= 1);
-    av_assert2(i <= range);
-
-    if (range == 2)
-        put_bits(pb, 1, i ^ 1);
-    else
-        set_ue_golomb(pb, i);
-}
-
-/**
- * write signed exp golomb code. 16 bits at most.
- */
-static inline void set_se_golomb(PutBitContext *pb, int i)
-{
-    i = 2 * i - 1;
-    if (i < 0)
-        i ^= -1;    //FIXME check if gcc does the right thing
-    set_ue_golomb(pb, i);
-}
-
-/**
- * write unsigned golomb rice code (ffv1).
- */
-static inline void set_ur_golomb(PutBitContext *pb, int i, int k, int limit,
-                                 int esc_len)
-{
-    int e;
-
-    av_assert2(i >= 0);
-
-    e = i >> k;
-    if (e < limit)
-        put_bits(pb, e + k + 1, (1 << k) + av_mod_uintp2(i, k));
-    else
-        put_bits(pb, limit + esc_len, i - limit + 1);
-}
-
-/**
- * write unsigned golomb rice code (jpegls).
- */
-static inline void set_ur_golomb_jpegls(PutBitContext *pb, int i, int k,
-                                        int limit, int esc_len)
-{
-    int e;
-
-    av_assert2(i >= 0);
-
-    e = (i >> k) + 1;
-    if (e < limit) {
-        while (e > 31) {
-            put_bits(pb, 31, 0);
-            e -= 31;
-        }
-        put_bits(pb, e, 1);
-        if (k)
-            put_sbits(pb, k, i);
-    } else {
-        while (limit > 31) {
-            put_bits(pb, 31, 0);
-            limit -= 31;
-        }
-        put_bits(pb, limit, 1);
-        put_bits(pb, esc_len, i - 1);
-    }
-}
-
-/**
- * write signed golomb rice code (ffv1).
- */
-static inline void set_sr_golomb(PutBitContext *pb, int i, int k, int limit,
-                                 int esc_len)
-{
-    int v;
-
-    v  = -2 * i - 1;
-    v ^= (v >> 31);
-
-    set_ur_golomb(pb, v, k, limit, esc_len);
-}
-
-/**
- * write signed golomb rice code (flac).
- */
-static inline void set_sr_golomb_flac(PutBitContext *pb, int i, int k,
-                                      int limit, int esc_len)
-{
-    int v;
-
-    v  = -2 * i - 1;
-    v ^= (v >> 31);
-
-    set_ur_golomb_jpegls(pb, v, k, limit, esc_len);
-}
-
 #endif /* AVCODEC_GOLOMB_H */
diff --git a/libavcodec/vlc.h b/libavcodec/vlc.h
index 6879c3ca6a..42ccddf3fc 100644
--- a/libavcodec/vlc.h
+++ b/libavcodec/vlc.h
@@ -49,73 +49,28 @@ int ff_init_vlc_sparse(VLC *vlc, int nb_bits, int nb_codes,
                        const void *codes, int codes_wrap, int codes_size,
                        const void *symbols, int symbols_wrap, int symbols_size,
                        int flags);
-
-/**
- * Build VLC decoding tables suitable for use with get_vlc2()
- *
- * This function takes lengths and symbols and calculates the codes from them.
- * For this the input lengths and symbols have to be sorted according to "left
- * nodes in the corresponding tree first".
- *
- * @param[in,out] vlc      The VLC to be initialized; table and table_allocated
- *                         must have been set when initializing a static VLC,
- *                         otherwise this will be treated as uninitialized.
- * @param[in] nb_bits      The number of bits to use for the VLC table;
- *                         higher values take up more memory and cache, but
- *                         allow to read codes with fewer reads.
- * @param[in] nb_codes     The number of provided length and (if supplied) symbol
- *                         entries.
- * @param[in] lens         The lengths of the codes. Entries > 0 correspond to
- *                         valid codes; entries == 0 will be skipped and entries
- *                         with len < 0 indicate that the tree is incomplete and
- *                         has an open end of length -len at this position.
- * @param[in] lens_wrap    Stride (in bytes) of the lengths.
- * @param[in] symbols      The symbols, i.e. what is returned from get_vlc2()
- *                         when the corresponding code is encountered.
- *                         May be NULL, then 0, 1, 2, 3, 4,... will be used.
- * @param[in] symbols_wrap Stride (in bytes) of the symbols.
- * @param[in] symbols_size Size of the symbols. 1 and 2 are supported.
- * @param[in] offset       An offset to apply to all the valid symbols.
- * @param[in] flags        A combination of the INIT_VLC_* flags; notice that
- *                         INIT_VLC_INPUT_LE is pointless and ignored.
- */
-int ff_init_vlc_from_lengths(VLC *vlc, int nb_bits, int nb_codes,
-                             const int8_t *lens, int lens_wrap,
-                             const void *symbols, int symbols_wrap, int symbols_size,
-                             int offset, int flags, void *logctx);
-
 void ff_free_vlc(VLC *vlc);
 
-/* If INIT_VLC_INPUT_LE is set, the LSB bit of the codes used to
- * initialize the VLC table is the first bit to be read. */
-#define INIT_VLC_INPUT_LE       2
-/* If set the VLC is intended for a little endian bitstream reader. */
-#define INIT_VLC_OUTPUT_LE      8
-#define INIT_VLC_LE             (INIT_VLC_INPUT_LE | INIT_VLC_OUTPUT_LE)
+#define INIT_VLC_LE             2
 #define INIT_VLC_USE_NEW_STATIC 4
-#define INIT_VLC_STATIC_OVERLONG (1 | INIT_VLC_USE_NEW_STATIC)
 
-#define INIT_CUSTOM_VLC_SPARSE_STATIC(vlc, bits, a, b, c, d, e, f, g,      \
-                                      h, i, j, flags, static_size)         \
+#define INIT_VLC_SPARSE_STATIC(vlc, bits, a, b, c, d, e, f, g, h, i, j, static_size) \
     do {                                                                   \
         static VLC_TYPE table[static_size][2];                             \
         (vlc)->table           = table;                                    \
         (vlc)->table_allocated = static_size;                              \
         ff_init_vlc_sparse(vlc, bits, a, b, c, d, e, f, g, h, i, j,        \
-                           flags | INIT_VLC_USE_NEW_STATIC);               \
+            INIT_VLC_USE_NEW_STATIC);                                      \
     } while (0)
 
-#define INIT_VLC_SPARSE_STATIC(vlc, bits, a, b, c, d, e, f, g, h, i, j, static_size) \
-    INIT_CUSTOM_VLC_SPARSE_STATIC(vlc, bits, a, b, c, d, e, f, g,          \
-                                  h, i, j, 0, static_size)
-
 #define INIT_LE_VLC_SPARSE_STATIC(vlc, bits, a, b, c, d, e, f, g, h, i, j, static_size) \
-    INIT_CUSTOM_VLC_SPARSE_STATIC(vlc, bits, a, b, c, d, e, f, g,          \
-                                  h, i, j, INIT_VLC_LE, static_size)
-
-#define INIT_CUSTOM_VLC_STATIC(vlc, bits, a, b, c, d, e, f, g, flags, static_size) \
-    INIT_CUSTOM_VLC_SPARSE_STATIC(vlc, bits, a, b, c, d, e, f, g,          \
-                                  NULL, 0, 0, flags, static_size)
+    do {                                                                   \
+        static VLC_TYPE table[static_size][2];                             \
+        (vlc)->table           = table;                                    \
+        (vlc)->table_allocated = static_size;                              \
+        ff_init_vlc_sparse(vlc, bits, a, b, c, d, e, f, g, h, i, j,        \
+            INIT_VLC_USE_NEW_STATIC | INIT_VLC_LE);                        \
+    } while (0)
 
 #define INIT_VLC_STATIC(vlc, bits, a, b, c, d, e, f, g, static_size)       \
     INIT_VLC_SPARSE_STATIC(vlc, bits, a, b, c, d, e, f, g, NULL, 0, 0, static_size)
@@ -123,17 +78,4 @@ void ff_free_vlc(VLC *vlc);
 #define INIT_LE_VLC_STATIC(vlc, bits, a, b, c, d, e, f, g, static_size) \
     INIT_LE_VLC_SPARSE_STATIC(vlc, bits, a, b, c, d, e, f, g, NULL, 0, 0, static_size)
 
-#define INIT_VLC_STATIC_FROM_LENGTHS(vlc, bits, nb_codes, lens, len_wrap,  \
-                                     symbols, symbols_wrap, symbols_size,  \
-                                     offset, flags, static_size)           \
-    do {                                                                   \
-        static VLC_TYPE table[static_size][2];                             \
-        (vlc)->table           = table;                                    \
-        (vlc)->table_allocated = static_size;                              \
-        ff_init_vlc_from_lengths(vlc, bits, nb_codes, lens, len_wrap,      \
-                                 symbols, symbols_wrap, symbols_size,      \
-                                 offset, flags | INIT_VLC_USE_NEW_STATIC,  \
-                                 NULL);                                    \
-    } while (0)
-
 #endif /* AVCODEC_VLC_H */
diff --git a/libavformat/isom.h b/libavformat/isom.h
index 5a6d504090..8c20cada66 100644
--- a/libavformat/isom.h
+++ b/libavformat/isom.h
@@ -244,7 +244,7 @@ typedef struct MOVStreamContext {
 } MOVStreamContext;
 
 typedef struct MOVContext {
-    const AVClass *class; ///< class for private options
+    const AVClass *clazz; ///< class for private options
     AVFormatContext *fc;
     int time_scale;
     int64_t duration;     ///< duration of the longest track
@@ -286,17 +286,11 @@ typedef struct MOVContext {
     int activation_bytes_size;
     void *audible_fixed_key;
     int audible_fixed_key_size;
-    void *audible_key;
-    int audible_key_size;
-    void *audible_iv;
-    int audible_iv_size;
     struct AVAES *aes_decrypt;
     uint8_t *decryption_key;
     int decryption_key_len;
     int enable_drefs;
     int32_t movie_display_matrix[3][3]; ///< display matrix from mvhd
-    int have_read_mfra_size;
-    uint32_t mfra_size;
 } MOVContext;
 
 int ff_mp4_read_descr_len(AVIOContext *pb);
@@ -372,18 +366,4 @@ void ff_mov_write_chan(AVIOContext *pb, int64_t channel_layout);
 #define FF_MOV_FLAG_MFRA_DTS 1
 #define FF_MOV_FLAG_MFRA_PTS 2
 
-/**
- * Compute codec id for 'lpcm' tag.
- * See CoreAudioTypes and AudioStreamBasicDescription at Apple.
- */
-static inline enum AVCodecID ff_mov_get_lpcm_codec_id(int bps, int flags)
-{
-    /* lpcm flags:
-     * 0x1 = float
-     * 0x2 = big-endian
-     * 0x4 = signed
-     */
-    return ff_get_pcm_codec_id(bps, flags & 1, flags & 2, flags & 4 ? -1 : 0);
-}
-
 #endif /* AVFORMAT_ISOM_H */
